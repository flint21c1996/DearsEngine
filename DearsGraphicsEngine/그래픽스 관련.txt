버퍼의 사용성

버텍스 버퍼와 인덱스 버퍼의 경우 모델 당 하나씩만 있으면 된다.
하지만 게임엔진에서 오브젝트를 생성 할 경우 각각의 오브젝트마다 컨스턴트 버퍼가 존대햐야한다.
이 컨스턴트 버퍼의 경우 그래픽스 엔진에서 들고있을수도 있고, 오브젝트의 정보를 받아 그때그때 복사를 해야할 수도 있다.

즉, 컨스턴트 버퍼의 내용은 게임엔진과 그래픽스 엔진 서로가 다 알고 있어야 한다.
-> 예를 들어말하면 오브젝트의 x,y,z은 게임엔진에서 알고있어야하며(오브젝트의 위치값을 설정하고 업데이트를 해야하기 때문에)
	그 값을 컨스턴트 버퍼에 업데이트하기위해서는 컨스턴트 버퍼에 맞는 구조체를 수정/구성하여 Maping/UnMaping해주어야 하기때문이다.
	
	이 부분은 모듈로 빼야한다. 즉, 그래픽스도 이 모듈의 내용을 알고 있어야한다.


	그럼 버텍스, 인덱스버퍼에 대해 생각을 해본다.
	버텍스, 인덱스버퍼의 경우 리소스를 읽음과 동시에 생성해주는게 속도면에서 이득이 있다.
	즉, 리소스 매니저를 거치면며  assimp를 통해 데이터값을 읽고 따로 구조체에 저장을 한 뒤, 버퍼를 생성하는게 좋아보인다.
	씬이 전환될 경우 리소스매니저를 통해 리소스를 새로 불러온다.
	그럼 이 리소스 관리(버퍼 관리)는 어디서 해줄 것인가?
	일단 Renderer은 버퍼를 관리하는 클래스가 아니다 화면에 그리는 클래스일뿐..
	